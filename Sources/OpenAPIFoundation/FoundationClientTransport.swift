import Foundation
import HTTPTypes
import OpenAPIRuntime

/// Function that can execute a `URLRequest`.
///
/// This is used to abstract the actual networking system from the underlying authentication mechanism.
public typealias URLResponseProvider = @Sendable (URLRequest) async throws -> (Data, URLResponse)

/// A client transport that hands off HTTP operations to a closure that works with types provided by the Foundation framework.
///
/// This client transport allows you to hand off responsibility for making HTTP requests and providing responses to other providers.
///
/// ### Use the Foundation transport
///
/// Instantiate the transport:
///
///     let transport = FoundationClientTransport(responseProvider: â€¦)
///
/// Instantiate the `Client` type generated by the Swift OpenAPI Generator for your provided OpenAPI document. For example:
///
///     let client = Client(
///         serverURL: URL(string: "https://example.com")!,
///         transport: transport
///     )
///
/// Use the client to make HTTP calls defined in your OpenAPI document. For
/// example, if the OpenAPI document contains an HTTP operation with
/// the identifier `checkHealth`, call it from Swift with:
///
///     let response = try await client.checkHealth()
///
public struct FoundationClientTransport: ClientTransport {
    /// Creates a new client transport that uses the provided URL response provider.
    /// - Parameter responseProvider: Function that can execute a `URLRequest`.
    public init(responseProvider: @escaping URLResponseProvider) {
        self.responseProvider = responseProvider
    }

    /// Sends the underlying HTTP request and returns the received HTTP response.
    /// - Parameters:
    ///   - request: An HTTP request.
    ///   - requestBody: An HTTP request body.
    ///   - baseURL: A server base URL.
    ///   - operationID: The identifier of the OpenAPI operation.
    /// - Returns: An HTTP response and its body.
    /// - Throws: If there was an error performing the HTTP request.
    public func send(_ request: HTTPTypes.HTTPRequest, body: OpenAPIRuntime.HTTPBody?, baseURL: URL, operationID: String) async throws -> (HTTPTypes.HTTPResponse, OpenAPIRuntime.HTTPBody?) {
        let urlRequest = try URLRequest(request, baseURL: baseURL)
        let (data, response) = try await responseProvider(urlRequest)

        return try (
            HTTPTypes.HTTPResponse(response),
            OpenAPIRuntime.HTTPBody(data, length: .known(Int64(data.count)), iterationBehavior: .single)
        )
    }
    
    /// Function that can execute a `URLRequest`.
    let responseProvider: URLResponseProvider
}
